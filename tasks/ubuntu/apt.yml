---
- name: Check if fuser exists
  stat:
    path: /bin/fuser
  register: ek_fuser_result

- name: Wait for APT to stop
  when: ek_fuser_result.stat.exists == True
  become: true
  raw: fuser /var/lib/apt/lists/lock
  register: ek_install_lock_result
  until: ek_install_lock_result.rc == 1
  retries: 120
  delay: 1
  failed_when: ek_install_lock_result.rc == 0
  changed_when: false
  ignore_errors: true

- name: APT still running
  fail:
    msg: "The system cannot be further installed because another APT command is still running."
  when: "(ek_install_lock_result |Â default({})).rc | default(1) == 0"

- name: Ensure that preliminary dependencies are present
  become: true
  environment: "{{ ek_proxy_env }}"
  apt:
    state: latest
    update_cache: true
    name:
    - apt-transport-https
    - ca-certificates
    - software-properties-common

- name: Ensure Docker official GPG key is present
  become: true
  environment: "{{ ek_proxy_env }}"
  apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    state: present

- name: Ensure Docker stable repository is configured
  become: true
  environment: "{{ ek_proxy_env }}"
  apt_repository:
    repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Ensure that required dependencies are installed
  become: true
  environment: "{{ ek_proxy_env }}"
  apt:
    state: latest
    update_cache: true
    name:
    - corkscrew
    - nfs-common
    - ntp
    - python3
    - python3-pip

- name: Ensure the Docker package can be altered
  become: true
  dpkg_selections:
    name: docker-ce
    selection: install

- name: Resolve the latest acceptable version of Docker and ensure it is installed
  when: ek_docker_version != 'latest'
  block:
  - debug:
      verbosity: 1
      msg: "Requested Docker version: {{ ek_docker_version }}"

  - name: Fetch list of available Docker versions matching the requested version
    become: true
    shell: "apt-cache madison docker-ce | grep {{ ek_docker_version }} || :"
    register: ek_docker_versions_raw
    changed_when: false

  - set_fact:
      ek_docker_versions: "{{ ek_docker_versions | default([]) + [ (item.split('|')[1]|trim) ] }}"
    loop: "{{ ek_docker_versions_raw.stdout_lines }}"
    loop_control:
      label: "{{ item.split('|')[1]|trim }}"

  - fail:
      msg: "Unable to find a suitable Docker version."
    when: (ek_docker_versions | default([])) | length == 0

  - debug:
      verbosity: 1
      msg: "Resolved Docker version: {{ ek_docker_versions[0] }}"

  - name: "Ensure Docker {{ ek_docker_versions[0] }} and compose are installed"
    become: true
    environment: "{{ ek_proxy_env }}"
    apt:
      state: present
      update_cache: true
      # TODO: remove this when possible. Needed for now to allow downgrades but disable APT security checks too (https://github.com/ansible/ansible/issues/29451).
      force: true
      name:
      - docker-ce={{ ek_docker_versions[0] }}
      - docker-compose

  - name: Ensure the Docker package is preserved from version changes
    become: true
    dpkg_selections:
      name: docker-ce
      selection: hold

- name: Ensure the latest available version of Docker and compose are installed
  when: ek_docker_version == 'latest'
  become: true
  environment: "{{ ek_proxy_env }}"
  apt:
    state: latest
    update_cache: true
    name:
    - docker-ce
    - docker-compose
